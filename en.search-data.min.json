[{"id":0,"href":"/golden_cpp/about/","title":"About","parent":"","content":"Welcome to golden C/C++ documentation    This is an experimental documentation from markdown language using Hugo\n"},{"id":1,"href":"/golden_cpp/get-started/","title":"Get Started","parent":"","content":"Welcome to the official documentation of the Golden C/C++ Project    This is great and powered by Hugo\n"},{"id":2,"href":"/golden_cpp/get-started/golden/","title":"Golden","parent":"Get Started","content":"Welcome to the first minimal tutorial    Use pandoc for minimal projects    The pandoc is a lightweight documentation converter!\ntest    "},{"id":3,"href":"/golden_cpp/","title":"","parent":"","content":"golden_cpp    This is a skeleton template for a C/C++ project.\nMy development tools are     nix ❄️ (packaging from hell ❤️) clang-format (formatter) vscode (IDE) with  ms-vscode.cmake-tools ms-vscode.cpptools   ctest - sometimes catch2 (unit testing) Markdown (documentation)  Start developing    Use a classic Nix overlay    Option 1: use the software    The nokxpkgs channel and associate overlay can be imported with the -I command or by setting the NIX_PATH environment variable.\n# you can avoid this export by adding nokxpkgs to your channels export NIX_PATH=nixpkgs=https://github.com/nokx5/nokxpkgs/archive/main.tar.gz The package can then be used.\nnix-shell -p golden_cpp --command \u0026#34;cli_golden_cpp\u0026#34; Option 2: create a default.nix to build and develop the software    Create a simple default.nix from the channel.\n$ cat default.nix { pkgs ? import (builtins.fetchTarball \u0026#34;https://github.com/nokx5/nokxpkgs/archive/main.tar.gz\u0026#34;) { } }: with pkgs; { inherit golden_cpp; } You can then enter the shell or build the project.\n# option a: develop the local software nix-shell -A golden_cpp # option b: build the local software nix-build -A golden_cpp unlink result Use the experimental flake feature    NOTE: this section requires the experimental flake and nix-command features. Please refer to the official documentation for nix flakes. We highly recommand you to have a look to nix flakes since the issue of channel pinning is fixed with the flake.lock file.\nOption 1: use the software    The package can be used easily with flakes.\nnix shell github:nokx5/golden_cpp --command cli_golden_cpp Option 2: build and develop the software    You can enter the shell or build the project with flakes in a very convenient way.\n# option a: develop the local software nix develop # option b: build the local software nix build .#golden_cpp unlink result Code Snippets    One line code formatter for C/C++ projects\nnixfmt $(find -name \u0026#34;*.nix\u0026#34;) clang-format -i $(find . -path \u0026#34;./build*\u0026#34; -prune -name \u0026#34;*.c\u0026#34; -o -name \u0026#34;*.cpp\u0026#34; -o -name \u0026#34;*.h\u0026#34; -o -name \u0026#34;*.hpp\u0026#34;) cmake-format -i $(find . -path \u0026#34;./build*\u0026#34; -prune -name \u0026#34;*.cmake\u0026#34; -o -name \u0026#34;CMakeLists.txt\u0026#34;) "},{"id":4,"href":"/golden_cpp/categories/","title":"Categories","parent":"","content":""},{"id":5,"href":"/golden_cpp/tags/","title":"Tags","parent":"","content":""}]